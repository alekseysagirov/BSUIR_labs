#!/usr/bin/env ruby

require 'set'

MAX_KEY = 0xffffff
SIZE = 1_000_000

N_MIN_STEP = 1
N_MAX_STEP = MAX_KEY * 2 / SIZE - 1

class Generator

  CHARS = [?a..?z, ?A..?Z, ?0..?9, %W[_ -]].map(&:to_a).flatten

  class << self
    def generate_string length=6, collision_rate=7
      if @str_list && (rand(100) < collision_rate)
        @str_list.sample
      else
        length = rand(length) if length.is_a? Range

        res = length.times.with_object("") do |_, res|
          res << CHARS.sample
        end
        @str_list ||= []
        @str_list << res

        res
      end
    end

    def generate_number range = 0..10_000
      rand(range)
    end
  end
end

class Entry < Struct.new(:key, :string, :number)

  def initialize
    @@n ||= 0
    @@n += rand(N_MIN_STEP..N_MAX_STEP)
    @@n %= MAX_KEY + 1
    self.key = @@n
    self.string = Generator.generate_string 10..12
    self.number = Generator.generate_number 0..800_000
  end

  def ==(other)
    self.key == other.key or
      self.string == other.string && self.number=other.number
  end

  def to_s
     '%0.6x %d %s' % [key, number, string]
  end
end

elems = loop.with_object(Set.new) do |_, set|
  set << candidate = Entry.new
  break set if set.size >= SIZE
end

$stderr.puts("Total: #{elems.size}")
$stderr.puts("String field collisions: " +
             (elems.size - elems.group_by(&:string).keys.size).to_s)
$stderr.puts("Numeric field collisions: " +
             (elems.size - elems.group_by(&:number).keys.size).to_s)

puts elems.map(&:to_s).shuffle.join(?\n)
