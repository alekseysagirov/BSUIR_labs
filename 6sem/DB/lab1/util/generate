#!/usr/bin/env ruby

require 'set'

SIZE = 1_000_000
FAKE_KEYS_SIZE = 200

class Generator

  CHARS = [?a..?z, ?A..?Z, ?0..?9].map(&:to_a).flatten

  class << self
    def generate_key
      generate_string 6, 0
    end

    def generate_string length=6, collision_rate=3
      if @str_list && (rand(100) < collision_rate)
        @str_list.sample
      else
        length = rand(length) if length.is_a? Range

        res = length.times.with_object("") do |_, res|
          res << CHARS.sample
        end
        unless collision_rate.zero?
          @str_list ||= []
          @str_list << res
        end

        res
      end
    end

    def generate_number range = 0..10_000
      rand(range)
    end
  end
end

class Entry < Struct.new(:key, :string, :number)

  def initialize
    self.key = Generator.generate_key
    self.string = Generator.generate_string 10..12
    self.number = Generator.generate_number 0..800_000
  end

  def hash
    self.key.hash
  end

  def ==(other)
    self.string == other.string && self.number == other.number or
      self.key == other.key
  end

  def to_s
     '%s %d %s' % [key, number, string]
  end
end

elems = loop.with_object(Array.new) do |_, array|
  break array if array.size >= SIZE * 1.1
  array << Entry.new
end

# $stderr.puts elems.size.to_s

elems.uniq! { |el| "#{el.string} #{el.number}" }
# $stderr.puts elems.size.to_s

elems.uniq! &:key
# $stderr.puts elems.size.to_s

elems = elems.first SIZE

elems = loop.with_object(elems) do |_, array|
  break array if array.size >= SIZE
  candidate = Entry.new
  array << candidate  if array.none? { |el| el == candidate }
end

$stderr.puts("Total: #{elems.size}")
$stderr.puts("String field collisions: " +
             (elems.size - elems.group_by(&:string).keys.size).to_s)
$stderr.puts("Numeric field collisions: " +
             (elems.size - elems.group_by(&:number).keys.size).to_s)

fake_find_keys = loop.with_object(Array.new) do |_, array|
  break array if array.size >= FAKE_KEYS_SIZE
  key = Generator.generate_key
  array << key if elems.none? { |el| el.key == key }
end

File.open(ARGV[0], 'w') do |file|
  file.puts elems.map(&:to_s).join(?\n)
end

File.open(ARGV[1], 'w') do |file|
  file.puts (elems.map(&:key) + fake_find_keys).shuffle.join(?\n)
end
