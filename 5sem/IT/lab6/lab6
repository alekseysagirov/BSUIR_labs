#! /usr/bin/env ruby

def extended_euclid num, modul
  r1 = modul; r2 = num;
  t1 = 0; t2 = 1;
  while ( r2 > 0 ) do
    q = r1/r2
    r = r1 - q * r2
    r1 = r2
    r2 = r

    t = t1 - q * t2
    t1 = t2
    t2 = t
  end

  t1 += modul if t1 < 0
  return t1 if r1 == 1
  return Float::NAN
end

def get_primes n
  primes = [2]
  (3..n).each do |x|
    primes << x if primes.all?{ |el| x % el != 0 }
  end
  primes
end

def calc_phi n
  primes = get_primes n
  mult = primes.find_all{ |pr| n % pr == 0 }
  raise "Bad ko" if mult.size != 2
  (mult[0] - 1) * (mult[1] - 1)
end

class RSA
  def initialize r, ko, ks
    @r = r
    @ko = ko
    @ks = ks
  end

  def encode str
    raise "Uninitalized RSA usage" unless @ko
    res = ""
    str.each_byte do |b|
      enc_bytes = b ** @ko % @r
      enc_hi = (enc_bytes >> 8) & 0xFF
      enc_lo = enc_bytes & 0xFF
      res += enc_hi.chr + enc_lo.chr
    end
    res
  end

  def decode str
    raise "Uninitalized RSA usage" unless @ks
    res = ""
    str.each_byte.to_a.each_slice(2).map{ |(hi, lo)| (hi << 8) | lo }.each do |_2bytes|
      sym = _2bytes ** @ks % @r
      raise "Got symbol out of 256 when decoding. Possibly bad ks or r" if sym > 256
      res += sym.chr
    end
    res
  end

  class << self
    def create_encoding p, q, ks
      r = p * q
      raise "p * q if out of range (65536)" if r > 65535

      phi = (p - 1) * (q - 1)
      ko = extended_euclid ks, phi
      raise "Bad p and q" if ko.is_a?(Float) && !ko.finite?
      raise "Bad p, q or ks" if ko.gcd(phi) != 1
      STDERR.puts "Open key: #{ko}"

      new r, ko, ks
    end

    def create_decoding r, ks
      new r, nil, ks
    end

    def create_hacking r, ko
      phi = calc_phi r
      raise "Bad ko" if ko.gcd(phi) != 1
      ks = extended_euclid ko, phi

      raise "Bad ko or r" if ks.is_a?(Float) && !ks.finite?
      STDERR.puts "Secret key: #{ks}"

      new r, ko, ks
    end
  end
end

def wrong_usage
  STDERR.puts "Wrong arguments.\nUsage: ./lab4 [--encode p=<p>, q=<q>, ks=<ks> / --decode r=<r> ks=<ks> / --hack r=<r> ko=<ko>]"
  exit
end

def read_text
  text = ''
  while !$stdin.eof? do
    text += $stdin.gets
  end
  text
end

if ARGV[0] == '--encode'
  params_hash = Hash[ *ARGV[1..-1].join.split(?,).map{ |el| [el.split(?=)[0], el.split(?=)[1]] }.flatten ]
  wrong_usage unless params_hash.has_key?('p') && params_hash.has_key?('q') && params_hash.has_key?('ks')
  p = params_hash['p'].to_i; q = params_hash['q'].to_i; ks = params_hash['ks'].to_i;
  rsa = RSA.create_encoding(p, q, ks)
  text = read_text
  print rsa.encode text
elsif ARGV[0] == '--decode'
  params_hash = Hash[ *ARGV[1..-1].join.split(?,).map{ |el| [el.split(?=)[0], el.split(?=)[1]] }.flatten ]
  wrong_usage unless params_hash.has_key?('r') && params_hash.has_key?('ks')
  r = params_hash['r'].to_i; ks = params_hash['ks'].to_i;
  rsa = RSA.create_decoding(r, ks)
  text = read_text
  print rsa.decode text
elsif ARGV[0] == '--hack'
  params_hash = Hash[ *ARGV[1..-1].join.split(?,).map{ |el| [el.split(?=)[0], el.split(?=)[1]] }.flatten ]
  wrong_usage unless params_hash.has_key?('r') && params_hash.has_key?('ko')
  r = params_hash['r'].to_i; ko = params_hash['ko'].to_i;
  rsa = RSA.create_hacking(r, ko)
  text = read_text
  print rsa.decode text
end
