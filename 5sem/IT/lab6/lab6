#! /usr/bin/env ruby

require File.join(File.dirname(__FILE__), 'rsa.rb')

def wrong_usage
  STDERR.puts "Wrong arguments.\nUsage: ./lab4 [--encode p=<p>, q=<q>, ks=<ks> / --decode r=<r> ks=<ks> / --hack r=<r> ko=<ko>]"
  exit
end

def read_text
  text = ''
  while !$stdin.eof? do
    text += $stdin.gets
  end
  text
end

if ARGV[0] == '--encode'
  params_hash = Hash[ *ARGV[1..-1].join.split(?,).map{ |el| [el.split(?=)[0], el.split(?=)[1]] }.flatten ]
  wrong_usage unless params_hash.has_key?('p') && params_hash.has_key?('q') && params_hash.has_key?('ks')
  p = params_hash['p'].to_i; q = params_hash['q'].to_i; ks = params_hash['ks'].to_i;
  rsa = RSA.create_encoding(p, q, ks)
  STDERR.puts "Open key: #{rsa.ko}"
  text = read_text
  print rsa.encode text
elsif ARGV[0] == '--decode'
  params_hash = Hash[ *ARGV[1..-1].join.split(?,).map{ |el| [el.split(?=)[0], el.split(?=)[1]] }.flatten ]
  wrong_usage unless params_hash.has_key?('r') && params_hash.has_key?('ks')
  r = params_hash['r'].to_i; ks = params_hash['ks'].to_i;
  rsa = RSA.create_decoding(r, nil, ks)
  text = read_text
  print rsa.decode text
elsif ARGV[0] == '--hack'
  params_hash = Hash[ *ARGV[1..-1].join.split(?,).map{ |el| [el.split(?=)[0], el.split(?=)[1]] }.flatten ]
  wrong_usage unless params_hash.has_key?('r') && params_hash.has_key?('ko')
  r = params_hash['r'].to_i; ko = params_hash['ko'].to_i;
  rsa = RSA.create_hacking(r, ko)
  text = read_text
  print rsa.decode text
end
